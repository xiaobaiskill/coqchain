// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package staker

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/Ankr-network/coqchain"
	"github.com/Ankr-network/coqchain/accounts/abi"
	"github.com/Ankr-network/coqchain/accounts/abi/bind"
	"github.com/Ankr-network/coqchain/common"
	"github.com/Ankr-network/coqchain/core/types"
	"github.com/Ankr-network/coqchain/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakerProposalReq is an auto generated low-level Go binding around an user-defined struct.
type StakerProposalReq struct {
	Votee    common.Address
	VoteType uint8
}

// StakerMetaData contains all meta data concerning the Staker contract.
var StakerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"JoinedSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RejectedSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enumStaker.VoteRes\",\"name\":\"agree\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumStaker.VoteType\",\"name\":\"voteType\",\"type\":\"uint8\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"checkVoteStatus\",\"outputs\":[{\"internalType\":\"enumStaker.VoteRes\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochProposalVotees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochProposals\",\"outputs\":[{\"internalType\":\"enumStaker.VoteType\",\"name\":\"voteType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"epochVotedByBlockNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fineRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"signerContains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"votee\",\"type\":\"address\"},{\"internalType\":\"enumStaker.VoteType\",\"name\":\"voteType\",\"type\":\"uint8\"}],\"internalType\":\"structStaker.ProposalReq\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_agree\",\"type\":\"bool\"}],\"name\":\"singleVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"votee\",\"type\":\"address\"},{\"internalType\":\"enumStaker.VoteType\",\"name\":\"voteType\",\"type\":\"uint8\"}],\"internalType\":\"structStaker.ProposalReq[]\",\"name\":\"_proposals\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"_agrees\",\"type\":\"bool[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061318b806100206000396000f3fe6080604052600436106100e85760003560e01c80635cfecc0e1161008a5780639aa44524116100595780639aa44524146102fb578063a5a3ce5714610338578063d24df89314610375578063f3fef3a3146103a0576100e8565b80635cfecc0e1461023f578063760cdd2f1461026857806385be7778146102a5578063900cf0cf146102d0576100e8565b80633a4b66f1116100c65780633a4b66f1146101a45780633bf81c0c146101ae57806342cde4e8146101eb5780634d678e8c14610216576100e8565b80632026f638146100ed57806325ee57191461012a57806327e235e314610167575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f91906124ea565b6103c9565b6040516101219190612526565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c919061259f565b6103df565b60405161015e9190612669565b60405180910390f35b34801561017357600080fd5b5061018e60048036038101906101899190612684565b610490565b60405161019b9190612526565b60405180910390f35b6101ac6104a8565b005b3480156101ba57600080fd5b506101d560048036038101906101d091906126b1565b610500565b6040516101e29190612739565b60405180910390f35b3480156101f757600080fd5b50610200610538565b60405161020d9190612526565b60405180910390f35b34801561022257600080fd5b5061023d60048036038101906102389190612a22565b61053e565b005b34801561024b57600080fd5b5061026660048036038101906102619190612a9a565b610fbe565b005b34801561027457600080fd5b5061028f600480360381019061028a91906124ea565b6118bc565b60405161029c9190612ae9565b60405180910390f35b3480156102b157600080fd5b506102ba6118ee565b6040516102c79190612526565b60405180910390f35b3480156102dc57600080fd5b506102e56118f4565b6040516102f29190612526565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d9190612684565b6118fa565b60405161032f9190612ae9565b60405180910390f35b34801561034457600080fd5b5061035f600480360381019061035a9190612b04565b611929565b60405161036c9190612b53565b60405180910390f35b34801561038157600080fd5b5061038a611977565b6040516103979190612c2c565b60405180910390f35b3480156103ac57600080fd5b506103c760048036038101906103c29190612c4e565b611a68565b005b60008054826103d89190612cec565b9050919050565b6000600660006103ee866103c9565b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b60056020528060005260406000206000915090505481565b34600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104f79190612d1d565b92505081905550565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16905081565b60015481565b336105658160601b6bffffffffffffffffffffffff19166003611cf190919063ffffffff16565b6105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059b90612dae565b60405180910390fd5b81518351146105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90612e40565b60405180910390fd5b60008054436105f79190612cec565b90506001811015801561062c57506000600760006001846106189190612e60565b815260200190815260200160002080549050115b80156106625750600860006001836106449190612e60565b815260200190815260200160002060009054906101000a900460ff16155b1561067d5761067c6001826106779190612e60565b611d1e565b5b6106a33360601b6bffffffffffffffffffffffff19166003611cf190919063ffffffff16565b6106ad5750610fb9565b60005b8451811015610fb65760006106e28683815181106106d1576106d0612e94565b5b6020026020010151600001516118fa565b9050600060066000858152602001908152602001600020600088858151811061070e5761070d612e94565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600086848151811061076b5761076a612e94565b5b6020026020010151156107815760019050610786565b600290505b8280156107d457506002808111156107a1576107a06125f2565b5b8885815181106107b4576107b3612e94565b5b60200260200101516020015160028111156107d2576107d16125f2565b5b145b15610b9257600060028111156107ed576107ec6125f2565b5b8260000160009054906101000a900460ff166002811115610811576108106125f2565b5b036109a85760028260000160006101000a81548160ff0219169083600281111561083e5761083d6125f2565b5b0217905550808260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156108a7576108a66125f2565b5b021790555081600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506007600086815260200190815260200160002088858151811061093757610936612e94565b5b6020026020010151600001519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610af2565b600060028111156109bc576109bb6125f2565b5b8260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166002811115610a1d57610a1c6125f2565b5b03610a885781600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610aec57610aeb6125f2565b5b02179055505b806002811115610b0557610b046125f2565b5b3373ffffffffffffffffffffffffffffffffffffffff167fa084722e3fd0ef4b05aa9c908c92d1510b00a28a03df619ae1eecd4262526f018a8781518110610b5057610b4f612e94565b5b6020026020010151600001518b8881518110610b6f57610b6e612e94565b5b602002602001015160200151604051610b89929190612ec3565b60405180910390a35b82158015610be2575060016002811115610baf57610bae6125f2565b5b888581518110610bc257610bc1612e94565b5b6020026020010151602001516002811115610be057610bdf6125f2565b5b145b15610fa05760006002811115610bfb57610bfa6125f2565b5b8260000160009054906101000a900460ff166002811115610c1f57610c1e6125f2565b5b03610db65760018260000160006101000a81548160ff02191690836002811115610c4c57610c4b6125f2565b5b0217905550808260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610cb557610cb46125f2565b5b021790555081600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060076000868152602001908152602001600020888581518110610d4557610d44612e94565b5b6020026020010151600001519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f00565b60006002811115610dca57610dc96125f2565b5b8260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166002811115610e2b57610e2a6125f2565b5b03610e965781600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610efa57610ef96125f2565b5b02179055505b806002811115610f1357610f126125f2565b5b3373ffffffffffffffffffffffffffffffffffffffff167fa084722e3fd0ef4b05aa9c908c92d1510b00a28a03df619ae1eecd4262526f018a8781518110610f5e57610f5d612e94565b5b6020026020010151600001518b8881518110610f7d57610f7c612e94565b5b602002602001015160200151604051610f97929190612ec3565b60405180910390a35b5050508080610fae90612eec565b9150506106b0565b50505b505050565b33610fe58160601b6bffffffffffffffffffffffff19166003611cf190919063ffffffff16565b611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90612dae565b60405180910390fd5b60008054436110339190612cec565b90506001811015801561106857506000600760006001846110549190612e60565b815260200190815260200160002080549050115b801561109e5750600860006001836110809190612e60565b815260200190815260200160002060009054906101000a900460ff16155b156110b9576110b86001826110b39190612e60565b611d1e565b5b6110df3360601b6bffffffffffffffffffffffff19166003611cf190919063ffffffff16565b6110e957506118b7565b6000600660008381526020019081526020016000206000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600084156111525760019050611157565b600290505b600061116687600001516118fa565b905080801561119c5750600280811115611183576111826125f2565b5b8760200151600281111561119a576111996125f2565b5b145b1561150c57600060028111156111b5576111b46125f2565b5b8360000160009054906101000a900460ff1660028111156111d9576111d86125f2565b5b036113565760028360000160006101000a81548160ff02191690836002811115611206576112056125f2565b5b0217905550818360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561126f5761126e6125f2565b5b021790555082600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506007600085815260200190815260200160002087600001519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506114a0565b6000600281111561136a576113696125f2565b5b8360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660028111156113cb576113ca6125f2565b5b036114365782600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b818360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561149a576114996125f2565b5b02179055505b8160028111156114b3576114b26125f2565b5b3373ffffffffffffffffffffffffffffffffffffffff167fa084722e3fd0ef4b05aa9c908c92d1510b00a28a03df619ae1eecd4262526f0189600001518a60200151604051611503929190612ec3565b60405180910390a35b80158015611542575060016002811115611529576115286125f2565b5b876020015160028111156115405761153f6125f2565b5b145b156118b2576000600281111561155b5761155a6125f2565b5b8360000160009054906101000a900460ff16600281111561157f5761157e6125f2565b5b036116fc5760018360000160006101000a81548160ff021916908360028111156115ac576115ab6125f2565b5b0217905550818360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115611615576116146125f2565b5b021790555082600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506007600085815260200190815260200160002087600001519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611846565b600060028111156117105761170f6125f2565b5b8360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166002811115611771576117706125f2565b5b036117dc5782600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b818360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156118405761183f6125f2565b5b02179055505b816002811115611859576118586125f2565b5b3373ffffffffffffffffffffffffffffffffffffffff167fa084722e3fd0ef4b05aa9c908c92d1510b00a28a03df619ae1eecd4262526f0189600001518a602001516040516118a9929190612ec3565b60405180910390a35b505050505b505050565b6000600860006118cb846103c9565b815260200190815260200160002060009054906101000a900460ff169050919050565b60025481565b60005481565b60006119228260601b6bffffffffffffffffffffffff19166003611cf190919063ffffffff16565b9050919050565b6007602052816000526040600020818154811061194557600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000611985600361203f565b90506000815167ffffffffffffffff8111156119a4576119a361276a565b5b6040519080825280602002602001820160405280156119d25781602001602082028036833780820191505090505b50905060005b8251811015611a5f578281815181106119f4576119f3612e94565b5b602002602001015160601c828281518110611a1257611a11612e94565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080611a5790612eec565b9150506119d8565b50809250505090565b611a8e3360601b6bffffffffffffffffffffffff19166003611cf190919063ffffffff16565b15611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac590612f80565b60405180910390fd5b611b16600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103c9565b611b1f436103c9565b11611b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5690612fec565b60405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611be1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd890613058565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c47906130c4565b60405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c9f9190612e60565b925050819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611cec573d6000803e3d6000fd5b505050565b600082600101600083815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600660008381526020019081526020016000209050600060076000848152602001908152602001600020905060006002611d5a600361209b565b611d649190612cec565b905060005b828054905081101561200c57600080856000868581548110611d8e57611d8d612e94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8160020180549050811015611ee45760016002811115611e1b57611e1a6125f2565b5b826001016000846002018481548110611e3757611e36612e94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166002811115611ebc57611ebb6125f2565b5b03611ed157600183611ece9190612d1d565b92505b8080611edc90612eec565b915050611df8565b5083821115611ff757600280811115611f0057611eff6125f2565b5b8160000160009054906101000a900460ff166002811115611f2457611f236125f2565b5b03611f7157611f7087868581548110611f4057611f3f612e94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166120ac565b5b60016002811115611f8557611f846125f2565b5b8160000160009054906101000a900460ff166002811115611fa957611fa86125f2565b5b03611ff657611ff587868581548110611fc557611fc4612e94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166121fb565b5b5b5050808061200490612eec565b915050611d69565b5060016008600086815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561208f57602002820191906000526020600020905b81548152602001906001019080831161207b575b50505050509050919050565b600081600001805490509050919050565b6120d28160601b6bffffffffffffffffffffffff19166003611cf190919063ffffffff16565b156121f7576120fd8160601b6bffffffffffffffffffffffff191660036122f690919063ffffffff16565b606460025460015461210f91906130e4565b6121199190612cec565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121679190612e60565b9250508190555043600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff16827f410168183235340153ca3998dc1d2998b903967dfb3c2505841855da15533ac160405160405180910390a35b5050565b600154600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106122f2576122698160601b6bffffffffffffffffffffffff1916600361241b90919063ffffffff16565b43600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff16827f0940c50c98545d979f71f86a23633c2ffcd0c9a269a519d4327039e9218d923460405160405180910390a35b5050565b81600101600082815260200190815260200160002060009054906101000a900460ff16156124175781600101600082815260200190815260200160002060006101000a81549060ff021916905560005b82600001805490508111612415578183600001828154811061236b5761236a612e94565b5b9060005260206000200154036124025782600001600184600001805490506123939190612e60565b815481106123a4576123a3612e94565b5b90600052602060002001548360000182815481106123c5576123c4612e94565b5b9060005260206000200181905550826000018054806123e7576123e6613126565b5b60019003818190600052602060002001600090559055612415565b808061240d90612eec565b915050612346565b505b5050565b81600101600082815260200190815260200160002060009054906101000a900460ff1661249c57600182600101600083815260200190815260200160002060006101000a81548160ff021916908315150217905550816000018190806001815401808255809150506001900390600052602060002001600090919091909150555b5050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6124c7816124b4565b81146124d257600080fd5b50565b6000813590506124e4816124be565b92915050565b600060208284031215612500576124ff6124aa565b5b600061250e848285016124d5565b91505092915050565b612520816124b4565b82525050565b600060208201905061253b6000830184612517565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061256c82612541565b9050919050565b61257c81612561565b811461258757600080fd5b50565b60008135905061259981612573565b92915050565b6000806000606084860312156125b8576125b76124aa565b5b60006125c6868287016124d5565b93505060206125d78682870161258a565b92505060406125e88682870161258a565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612632576126316125f2565b5b50565b600081905061264382612621565b919050565b600061265382612635565b9050919050565b61266381612648565b82525050565b600060208201905061267e600083018461265a565b92915050565b60006020828403121561269a576126996124aa565b5b60006126a88482850161258a565b91505092915050565b600080604083850312156126c8576126c76124aa565b5b60006126d6858286016124d5565b92505060206126e78582860161258a565b9150509250929050565b60038110612702576127016125f2565b5b50565b6000819050612713826126f1565b919050565b600061272382612705565b9050919050565b61273381612718565b82525050565b600060208201905061274e600083018461272a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127a282612759565b810181811067ffffffffffffffff821117156127c1576127c061276a565b5b80604052505050565b60006127d46124a0565b90506127e08282612799565b919050565b600067ffffffffffffffff821115612800576127ff61276a565b5b602082029050602081019050919050565b600080fd5b600080fd5b6003811061282857600080fd5b50565b60008135905061283a8161281b565b92915050565b60006040828403121561285657612855612816565b5b61286060406127ca565b905060006128708482850161258a565b60008301525060206128848482850161282b565b60208301525092915050565b60006128a361289e846127e5565b6127ca565b905080838252602082019050604084028301858111156128c6576128c5612811565b5b835b818110156128ef57806128db8882612840565b8452602084019350506040810190506128c8565b5050509392505050565b600082601f83011261290e5761290d612754565b5b813561291e848260208601612890565b91505092915050565b600067ffffffffffffffff8211156129425761294161276a565b5b602082029050602081019050919050565b60008115159050919050565b61296881612953565b811461297357600080fd5b50565b6000813590506129858161295f565b92915050565b600061299e61299984612927565b6127ca565b905080838252602082019050602084028301858111156129c1576129c0612811565b5b835b818110156129ea57806129d68882612976565b8452602084019350506020810190506129c3565b5050509392505050565b600082601f830112612a0957612a08612754565b5b8135612a1984826020860161298b565b91505092915050565b60008060408385031215612a3957612a386124aa565b5b600083013567ffffffffffffffff811115612a5757612a566124af565b5b612a63858286016128f9565b925050602083013567ffffffffffffffff811115612a8457612a836124af565b5b612a90858286016129f4565b9150509250929050565b60008060608385031215612ab157612ab06124aa565b5b6000612abf85828601612840565b9250506040612ad085828601612976565b9150509250929050565b612ae381612953565b82525050565b6000602082019050612afe6000830184612ada565b92915050565b60008060408385031215612b1b57612b1a6124aa565b5b6000612b29858286016124d5565b9250506020612b3a858286016124d5565b9150509250929050565b612b4d81612561565b82525050565b6000602082019050612b686000830184612b44565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ba381612561565b82525050565b6000612bb58383612b9a565b60208301905092915050565b6000602082019050919050565b6000612bd982612b6e565b612be38185612b79565b9350612bee83612b8a565b8060005b83811015612c1f578151612c068882612ba9565b9750612c1183612bc1565b925050600181019050612bf2565b5085935050505092915050565b60006020820190508181036000830152612c468184612bce565b905092915050565b60008060408385031215612c6557612c646124aa565b5b6000612c738582860161258a565b9250506020612c84858286016124d5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612cf7826124b4565b9150612d02836124b4565b925082612d1257612d11612c8e565b5b828204905092915050565b6000612d28826124b4565b9150612d33836124b4565b9250828201905080821115612d4b57612d4a612cbd565b5b92915050565b600082825260208201905092915050565b7f696e76616c6964207369676e6572000000000000000000000000000000000000600082015250565b6000612d98600e83612d51565b9150612da382612d62565b602082019050919050565b60006020820190508181036000830152612dc781612d8b565b9050919050565b7f70726f706f73616c73206c656e677468206d69736d617463682077697468206160008201527f6772656573000000000000000000000000000000000000000000000000000000602082015250565b6000612e2a602583612d51565b9150612e3582612dce565b604082019050919050565b60006020820190508181036000830152612e5981612e1d565b9050919050565b6000612e6b826124b4565b9150612e76836124b4565b9250828203905081811115612e8e57612e8d612cbd565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612ed86000830185612b44565b612ee5602083018461272a565b9392505050565b6000612ef7826124b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f2957612f28612cbd565b5b600182019050919050565b7f7374616b696e672c20756e61626c6520746f2077697468647261770000000000600082015250565b6000612f6a601b83612d51565b9150612f7582612f34565b602082019050919050565b60006020820190508181036000830152612f9981612f5d565b9050919050565b7f776974686472617720696e20746865206e6578742065706f6368000000000000600082015250565b6000612fd6601a83612d51565b9150612fe182612fa0565b602082019050919050565b6000602082019050818103600083015261300581612fc9565b9050919050565b7f696e73756666696369656e7420616d6f756e7400000000000000000000000000600082015250565b6000613042601383612d51565b915061304d8261300c565b602082019050919050565b6000602082019050818103600083015261307181613035565b9050919050565b7f7a65726f2061646472657373206973206e6f7420616c6c6f7765640000000000600082015250565b60006130ae601b83612d51565b91506130b982613078565b602082019050919050565b600060208201905081810360008301526130dd816130a1565b9050919050565b60006130ef826124b4565b91506130fa836124b4565b9250828202613108816124b4565b9150828204841483151761311f5761311e612cbd565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122086a9445b409aba88a1db679ba27eae14faaec2edf88fe3176e3e60739154327064736f6c63430008110033",
}

// StakerABI is the input ABI used to generate the binding from.
// Deprecated: Use StakerMetaData.ABI instead.
var StakerABI = StakerMetaData.ABI

// StakerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakerMetaData.Bin instead.
var StakerBin = StakerMetaData.Bin

// DeployStaker deploys a new Ethereum contract, binding an instance of Staker to it.
func DeployStaker(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Staker, error) {
	parsed, err := StakerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staker{StakerCaller: StakerCaller{contract: contract}, StakerTransactor: StakerTransactor{contract: contract}, StakerFilterer: StakerFilterer{contract: contract}}, nil
}

// Staker is an auto generated Go binding around an Ethereum contract.
type Staker struct {
	StakerCaller     // Read-only binding to the contract
	StakerTransactor // Write-only binding to the contract
	StakerFilterer   // Log filterer for contract events
}

// StakerCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakerSession struct {
	Contract     *Staker           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakerCallerSession struct {
	Contract *StakerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StakerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakerTransactorSession struct {
	Contract     *StakerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakerRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakerRaw struct {
	Contract *Staker // Generic contract binding to access the raw methods on
}

// StakerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakerCallerRaw struct {
	Contract *StakerCaller // Generic read-only contract binding to access the raw methods on
}

// StakerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakerTransactorRaw struct {
	Contract *StakerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaker creates a new instance of Staker, bound to a specific deployed contract.
func NewStaker(address common.Address, backend bind.ContractBackend) (*Staker, error) {
	contract, err := bindStaker(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staker{StakerCaller: StakerCaller{contract: contract}, StakerTransactor: StakerTransactor{contract: contract}, StakerFilterer: StakerFilterer{contract: contract}}, nil
}

// NewStakerCaller creates a new read-only instance of Staker, bound to a specific deployed contract.
func NewStakerCaller(address common.Address, caller bind.ContractCaller) (*StakerCaller, error) {
	contract, err := bindStaker(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakerCaller{contract: contract}, nil
}

// NewStakerTransactor creates a new write-only instance of Staker, bound to a specific deployed contract.
func NewStakerTransactor(address common.Address, transactor bind.ContractTransactor) (*StakerTransactor, error) {
	contract, err := bindStaker(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakerTransactor{contract: contract}, nil
}

// NewStakerFilterer creates a new log filterer instance of Staker, bound to a specific deployed contract.
func NewStakerFilterer(address common.Address, filterer bind.ContractFilterer) (*StakerFilterer, error) {
	contract, err := bindStaker(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakerFilterer{contract: contract}, nil
}

// bindStaker binds a generic wrapper to an already deployed contract.
func bindStaker(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staker *StakerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staker.Contract.StakerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staker *StakerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staker.Contract.StakerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staker *StakerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staker.Contract.StakerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staker *StakerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staker.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staker *StakerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staker.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staker *StakerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staker.Contract.contract.Transact(opts, method, params...)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(uint256)
func (_Staker *StakerCaller) Balances(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "balances", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(uint256)
func (_Staker *StakerSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _Staker.Contract.Balances(&_Staker.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(uint256)
func (_Staker *StakerCallerSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _Staker.Contract.Balances(&_Staker.CallOpts, arg0)
}

// CheckVoteStatus is a free data retrieval call binding the contract method 0x25ee5719.
//
// Solidity: function checkVoteStatus(uint256 _blockNumber, address _votee, address _voter) view returns(uint8)
func (_Staker *StakerCaller) CheckVoteStatus(opts *bind.CallOpts, _blockNumber *big.Int, _votee common.Address, _voter common.Address) (uint8, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "checkVoteStatus", _blockNumber, _votee, _voter)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckVoteStatus is a free data retrieval call binding the contract method 0x25ee5719.
//
// Solidity: function checkVoteStatus(uint256 _blockNumber, address _votee, address _voter) view returns(uint8)
func (_Staker *StakerSession) CheckVoteStatus(_blockNumber *big.Int, _votee common.Address, _voter common.Address) (uint8, error) {
	return _Staker.Contract.CheckVoteStatus(&_Staker.CallOpts, _blockNumber, _votee, _voter)
}

// CheckVoteStatus is a free data retrieval call binding the contract method 0x25ee5719.
//
// Solidity: function checkVoteStatus(uint256 _blockNumber, address _votee, address _voter) view returns(uint8)
func (_Staker *StakerCallerSession) CheckVoteStatus(_blockNumber *big.Int, _votee common.Address, _voter common.Address) (uint8, error) {
	return _Staker.Contract.CheckVoteStatus(&_Staker.CallOpts, _blockNumber, _votee, _voter)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Staker *StakerCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Staker *StakerSession) Epoch() (*big.Int, error) {
	return _Staker.Contract.Epoch(&_Staker.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Staker *StakerCallerSession) Epoch() (*big.Int, error) {
	return _Staker.Contract.Epoch(&_Staker.CallOpts)
}

// EpochProposalVotees is a free data retrieval call binding the contract method 0xa5a3ce57.
//
// Solidity: function epochProposalVotees(uint256 , uint256 ) view returns(address)
func (_Staker *StakerCaller) EpochProposalVotees(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "epochProposalVotees", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EpochProposalVotees is a free data retrieval call binding the contract method 0xa5a3ce57.
//
// Solidity: function epochProposalVotees(uint256 , uint256 ) view returns(address)
func (_Staker *StakerSession) EpochProposalVotees(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Staker.Contract.EpochProposalVotees(&_Staker.CallOpts, arg0, arg1)
}

// EpochProposalVotees is a free data retrieval call binding the contract method 0xa5a3ce57.
//
// Solidity: function epochProposalVotees(uint256 , uint256 ) view returns(address)
func (_Staker *StakerCallerSession) EpochProposalVotees(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Staker.Contract.EpochProposalVotees(&_Staker.CallOpts, arg0, arg1)
}

// EpochProposals is a free data retrieval call binding the contract method 0x3bf81c0c.
//
// Solidity: function epochProposals(uint256 , address ) view returns(uint8 voteType)
func (_Staker *StakerCaller) EpochProposals(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (uint8, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "epochProposals", arg0, arg1)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochProposals is a free data retrieval call binding the contract method 0x3bf81c0c.
//
// Solidity: function epochProposals(uint256 , address ) view returns(uint8 voteType)
func (_Staker *StakerSession) EpochProposals(arg0 *big.Int, arg1 common.Address) (uint8, error) {
	return _Staker.Contract.EpochProposals(&_Staker.CallOpts, arg0, arg1)
}

// EpochProposals is a free data retrieval call binding the contract method 0x3bf81c0c.
//
// Solidity: function epochProposals(uint256 , address ) view returns(uint8 voteType)
func (_Staker *StakerCallerSession) EpochProposals(arg0 *big.Int, arg1 common.Address) (uint8, error) {
	return _Staker.Contract.EpochProposals(&_Staker.CallOpts, arg0, arg1)
}

// EpochVotedByBlockNumber is a free data retrieval call binding the contract method 0x760cdd2f.
//
// Solidity: function epochVotedByBlockNumber(uint256 _blockNumber) view returns(bool)
func (_Staker *StakerCaller) EpochVotedByBlockNumber(opts *bind.CallOpts, _blockNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "epochVotedByBlockNumber", _blockNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EpochVotedByBlockNumber is a free data retrieval call binding the contract method 0x760cdd2f.
//
// Solidity: function epochVotedByBlockNumber(uint256 _blockNumber) view returns(bool)
func (_Staker *StakerSession) EpochVotedByBlockNumber(_blockNumber *big.Int) (bool, error) {
	return _Staker.Contract.EpochVotedByBlockNumber(&_Staker.CallOpts, _blockNumber)
}

// EpochVotedByBlockNumber is a free data retrieval call binding the contract method 0x760cdd2f.
//
// Solidity: function epochVotedByBlockNumber(uint256 _blockNumber) view returns(bool)
func (_Staker *StakerCallerSession) EpochVotedByBlockNumber(_blockNumber *big.Int) (bool, error) {
	return _Staker.Contract.EpochVotedByBlockNumber(&_Staker.CallOpts, _blockNumber)
}

// FineRatio is a free data retrieval call binding the contract method 0x85be7778.
//
// Solidity: function fineRatio() view returns(uint256)
func (_Staker *StakerCaller) FineRatio(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "fineRatio")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FineRatio is a free data retrieval call binding the contract method 0x85be7778.
//
// Solidity: function fineRatio() view returns(uint256)
func (_Staker *StakerSession) FineRatio() (*big.Int, error) {
	return _Staker.Contract.FineRatio(&_Staker.CallOpts)
}

// FineRatio is a free data retrieval call binding the contract method 0x85be7778.
//
// Solidity: function fineRatio() view returns(uint256)
func (_Staker *StakerCallerSession) FineRatio() (*big.Int, error) {
	return _Staker.Contract.FineRatio(&_Staker.CallOpts)
}

// GetCycle is a free data retrieval call binding the contract method 0x2026f638.
//
// Solidity: function getCycle(uint256 _blockNumber) view returns(uint256)
func (_Staker *StakerCaller) GetCycle(opts *bind.CallOpts, _blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "getCycle", _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCycle is a free data retrieval call binding the contract method 0x2026f638.
//
// Solidity: function getCycle(uint256 _blockNumber) view returns(uint256)
func (_Staker *StakerSession) GetCycle(_blockNumber *big.Int) (*big.Int, error) {
	return _Staker.Contract.GetCycle(&_Staker.CallOpts, _blockNumber)
}

// GetCycle is a free data retrieval call binding the contract method 0x2026f638.
//
// Solidity: function getCycle(uint256 _blockNumber) view returns(uint256)
func (_Staker *StakerCallerSession) GetCycle(_blockNumber *big.Int) (*big.Int, error) {
	return _Staker.Contract.GetCycle(&_Staker.CallOpts, _blockNumber)
}

// SignerContains is a free data retrieval call binding the contract method 0x9aa44524.
//
// Solidity: function signerContains(address _signer) view returns(bool)
func (_Staker *StakerCaller) SignerContains(opts *bind.CallOpts, _signer common.Address) (bool, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "signerContains", _signer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SignerContains is a free data retrieval call binding the contract method 0x9aa44524.
//
// Solidity: function signerContains(address _signer) view returns(bool)
func (_Staker *StakerSession) SignerContains(_signer common.Address) (bool, error) {
	return _Staker.Contract.SignerContains(&_Staker.CallOpts, _signer)
}

// SignerContains is a free data retrieval call binding the contract method 0x9aa44524.
//
// Solidity: function signerContains(address _signer) view returns(bool)
func (_Staker *StakerCallerSession) SignerContains(_signer common.Address) (bool, error) {
	return _Staker.Contract.SignerContains(&_Staker.CallOpts, _signer)
}

// SignerList is a free data retrieval call binding the contract method 0xd24df893.
//
// Solidity: function signerList() view returns(address[])
func (_Staker *StakerCaller) SignerList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "signerList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// SignerList is a free data retrieval call binding the contract method 0xd24df893.
//
// Solidity: function signerList() view returns(address[])
func (_Staker *StakerSession) SignerList() ([]common.Address, error) {
	return _Staker.Contract.SignerList(&_Staker.CallOpts)
}

// SignerList is a free data retrieval call binding the contract method 0xd24df893.
//
// Solidity: function signerList() view returns(address[])
func (_Staker *StakerCallerSession) SignerList() ([]common.Address, error) {
	return _Staker.Contract.SignerList(&_Staker.CallOpts)
}

// Threshold is a free data retrieval call binding the contract method 0x42cde4e8.
//
// Solidity: function threshold() view returns(uint256)
func (_Staker *StakerCaller) Threshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staker.contract.Call(opts, &out, "threshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Threshold is a free data retrieval call binding the contract method 0x42cde4e8.
//
// Solidity: function threshold() view returns(uint256)
func (_Staker *StakerSession) Threshold() (*big.Int, error) {
	return _Staker.Contract.Threshold(&_Staker.CallOpts)
}

// Threshold is a free data retrieval call binding the contract method 0x42cde4e8.
//
// Solidity: function threshold() view returns(uint256)
func (_Staker *StakerCallerSession) Threshold() (*big.Int, error) {
	return _Staker.Contract.Threshold(&_Staker.CallOpts)
}

// SingleVote is a paid mutator transaction binding the contract method 0x5cfecc0e.
//
// Solidity: function singleVote((address,uint8) _proposal, bool _agree) returns()
func (_Staker *StakerTransactor) SingleVote(opts *bind.TransactOpts, _proposal StakerProposalReq, _agree bool) (*types.Transaction, error) {
	return _Staker.contract.Transact(opts, "singleVote", _proposal, _agree)
}

// SingleVote is a paid mutator transaction binding the contract method 0x5cfecc0e.
//
// Solidity: function singleVote((address,uint8) _proposal, bool _agree) returns()
func (_Staker *StakerSession) SingleVote(_proposal StakerProposalReq, _agree bool) (*types.Transaction, error) {
	return _Staker.Contract.SingleVote(&_Staker.TransactOpts, _proposal, _agree)
}

// SingleVote is a paid mutator transaction binding the contract method 0x5cfecc0e.
//
// Solidity: function singleVote((address,uint8) _proposal, bool _agree) returns()
func (_Staker *StakerTransactorSession) SingleVote(_proposal StakerProposalReq, _agree bool) (*types.Transaction, error) {
	return _Staker.Contract.SingleVote(&_Staker.TransactOpts, _proposal, _agree)
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_Staker *StakerTransactor) Stake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staker.contract.Transact(opts, "stake")
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_Staker *StakerSession) Stake() (*types.Transaction, error) {
	return _Staker.Contract.Stake(&_Staker.TransactOpts)
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_Staker *StakerTransactorSession) Stake() (*types.Transaction, error) {
	return _Staker.Contract.Stake(&_Staker.TransactOpts)
}

// Vote is a paid mutator transaction binding the contract method 0x4d678e8c.
//
// Solidity: function vote((address,uint8)[] _proposals, bool[] _agrees) returns()
func (_Staker *StakerTransactor) Vote(opts *bind.TransactOpts, _proposals []StakerProposalReq, _agrees []bool) (*types.Transaction, error) {
	return _Staker.contract.Transact(opts, "vote", _proposals, _agrees)
}

// Vote is a paid mutator transaction binding the contract method 0x4d678e8c.
//
// Solidity: function vote((address,uint8)[] _proposals, bool[] _agrees) returns()
func (_Staker *StakerSession) Vote(_proposals []StakerProposalReq, _agrees []bool) (*types.Transaction, error) {
	return _Staker.Contract.Vote(&_Staker.TransactOpts, _proposals, _agrees)
}

// Vote is a paid mutator transaction binding the contract method 0x4d678e8c.
//
// Solidity: function vote((address,uint8)[] _proposals, bool[] _agrees) returns()
func (_Staker *StakerTransactorSession) Vote(_proposals []StakerProposalReq, _agrees []bool) (*types.Transaction, error) {
	return _Staker.Contract.Vote(&_Staker.TransactOpts, _proposals, _agrees)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Staker *StakerTransactor) Withdraw(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Staker.contract.Transact(opts, "withdraw", _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Staker *StakerSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Staker.Contract.Withdraw(&_Staker.TransactOpts, _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Staker *StakerTransactorSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Staker.Contract.Withdraw(&_Staker.TransactOpts, _to, _amount)
}

// StakerJoinedSignerIterator is returned from FilterJoinedSigner and is used to iterate over the raw logs and unpacked data for JoinedSigner events raised by the Staker contract.
type StakerJoinedSignerIterator struct {
	Event *StakerJoinedSigner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakerJoinedSignerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakerJoinedSigner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakerJoinedSigner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakerJoinedSignerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakerJoinedSignerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakerJoinedSigner represents a JoinedSigner event raised by the Staker contract.
type StakerJoinedSigner struct {
	Cycle  *big.Int
	Signer common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterJoinedSigner is a free log retrieval operation binding the contract event 0x0940c50c98545d979f71f86a23633c2ffcd0c9a269a519d4327039e9218d9234.
//
// Solidity: event JoinedSigner(uint256 indexed cycle, address indexed signer)
func (_Staker *StakerFilterer) FilterJoinedSigner(opts *bind.FilterOpts, cycle []*big.Int, signer []common.Address) (*StakerJoinedSignerIterator, error) {

	var cycleRule []interface{}
	for _, cycleItem := range cycle {
		cycleRule = append(cycleRule, cycleItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Staker.contract.FilterLogs(opts, "JoinedSigner", cycleRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &StakerJoinedSignerIterator{contract: _Staker.contract, event: "JoinedSigner", logs: logs, sub: sub}, nil
}

// WatchJoinedSigner is a free log subscription operation binding the contract event 0x0940c50c98545d979f71f86a23633c2ffcd0c9a269a519d4327039e9218d9234.
//
// Solidity: event JoinedSigner(uint256 indexed cycle, address indexed signer)
func (_Staker *StakerFilterer) WatchJoinedSigner(opts *bind.WatchOpts, sink chan<- *StakerJoinedSigner, cycle []*big.Int, signer []common.Address) (event.Subscription, error) {

	var cycleRule []interface{}
	for _, cycleItem := range cycle {
		cycleRule = append(cycleRule, cycleItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Staker.contract.WatchLogs(opts, "JoinedSigner", cycleRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakerJoinedSigner)
				if err := _Staker.contract.UnpackLog(event, "JoinedSigner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseJoinedSigner is a log parse operation binding the contract event 0x0940c50c98545d979f71f86a23633c2ffcd0c9a269a519d4327039e9218d9234.
//
// Solidity: event JoinedSigner(uint256 indexed cycle, address indexed signer)
func (_Staker *StakerFilterer) ParseJoinedSigner(log types.Log) (*StakerJoinedSigner, error) {
	event := new(StakerJoinedSigner)
	if err := _Staker.contract.UnpackLog(event, "JoinedSigner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakerRejectedSignerIterator is returned from FilterRejectedSigner and is used to iterate over the raw logs and unpacked data for RejectedSigner events raised by the Staker contract.
type StakerRejectedSignerIterator struct {
	Event *StakerRejectedSigner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakerRejectedSignerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakerRejectedSigner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakerRejectedSigner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakerRejectedSignerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakerRejectedSignerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakerRejectedSigner represents a RejectedSigner event raised by the Staker contract.
type StakerRejectedSigner struct {
	Cycle  *big.Int
	Signer common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRejectedSigner is a free log retrieval operation binding the contract event 0x410168183235340153ca3998dc1d2998b903967dfb3c2505841855da15533ac1.
//
// Solidity: event RejectedSigner(uint256 indexed cycle, address indexed signer)
func (_Staker *StakerFilterer) FilterRejectedSigner(opts *bind.FilterOpts, cycle []*big.Int, signer []common.Address) (*StakerRejectedSignerIterator, error) {

	var cycleRule []interface{}
	for _, cycleItem := range cycle {
		cycleRule = append(cycleRule, cycleItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Staker.contract.FilterLogs(opts, "RejectedSigner", cycleRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &StakerRejectedSignerIterator{contract: _Staker.contract, event: "RejectedSigner", logs: logs, sub: sub}, nil
}

// WatchRejectedSigner is a free log subscription operation binding the contract event 0x410168183235340153ca3998dc1d2998b903967dfb3c2505841855da15533ac1.
//
// Solidity: event RejectedSigner(uint256 indexed cycle, address indexed signer)
func (_Staker *StakerFilterer) WatchRejectedSigner(opts *bind.WatchOpts, sink chan<- *StakerRejectedSigner, cycle []*big.Int, signer []common.Address) (event.Subscription, error) {

	var cycleRule []interface{}
	for _, cycleItem := range cycle {
		cycleRule = append(cycleRule, cycleItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Staker.contract.WatchLogs(opts, "RejectedSigner", cycleRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakerRejectedSigner)
				if err := _Staker.contract.UnpackLog(event, "RejectedSigner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRejectedSigner is a log parse operation binding the contract event 0x410168183235340153ca3998dc1d2998b903967dfb3c2505841855da15533ac1.
//
// Solidity: event RejectedSigner(uint256 indexed cycle, address indexed signer)
func (_Staker *StakerFilterer) ParseRejectedSigner(log types.Log) (*StakerRejectedSigner, error) {
	event := new(StakerRejectedSigner)
	if err := _Staker.contract.UnpackLog(event, "RejectedSigner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakerVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Staker contract.
type StakerVotedIterator struct {
	Event *StakerVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakerVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakerVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakerVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakerVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakerVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakerVoted represents a Voted event raised by the Staker contract.
type StakerVoted struct {
	Signer   common.Address
	Agree    uint8
	Votee    common.Address
	VoteType uint8
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0xa084722e3fd0ef4b05aa9c908c92d1510b00a28a03df619ae1eecd4262526f01.
//
// Solidity: event Voted(address indexed signer, uint8 indexed agree, address votee, uint8 voteType)
func (_Staker *StakerFilterer) FilterVoted(opts *bind.FilterOpts, signer []common.Address, agree []uint8) (*StakerVotedIterator, error) {

	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}
	var agreeRule []interface{}
	for _, agreeItem := range agree {
		agreeRule = append(agreeRule, agreeItem)
	}

	logs, sub, err := _Staker.contract.FilterLogs(opts, "Voted", signerRule, agreeRule)
	if err != nil {
		return nil, err
	}
	return &StakerVotedIterator{contract: _Staker.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0xa084722e3fd0ef4b05aa9c908c92d1510b00a28a03df619ae1eecd4262526f01.
//
// Solidity: event Voted(address indexed signer, uint8 indexed agree, address votee, uint8 voteType)
func (_Staker *StakerFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *StakerVoted, signer []common.Address, agree []uint8) (event.Subscription, error) {

	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}
	var agreeRule []interface{}
	for _, agreeItem := range agree {
		agreeRule = append(agreeRule, agreeItem)
	}

	logs, sub, err := _Staker.contract.WatchLogs(opts, "Voted", signerRule, agreeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakerVoted)
				if err := _Staker.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoted is a log parse operation binding the contract event 0xa084722e3fd0ef4b05aa9c908c92d1510b00a28a03df619ae1eecd4262526f01.
//
// Solidity: event Voted(address indexed signer, uint8 indexed agree, address votee, uint8 voteType)
func (_Staker *StakerFilterer) ParseVoted(log types.Log) (*StakerVoted, error) {
	event := new(StakerVoted)
	if err := _Staker.contract.UnpackLog(event, "Voted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
